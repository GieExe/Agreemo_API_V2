"""modify sensor_readings_model and delete sensor_model

Revision ID: f9d140e5567f
Revises: ec0d44f8036e
Create Date: 2025-03-28 02:21:34.926685

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'f9d140e5567f'
down_revision = 'ec0d44f8036e'
branch_labels = None
depends_on = None


def upgrade():
    # Remove foreign key constraint first
    with op.batch_alter_table('sensor_readings', schema=None) as batch_op:
        batch_op.drop_constraint('sensor_readings_sensor_id_fkey', type_='foreignkey')

    # Now it's safe to drop the 'sensors' table
    op.drop_table('sensors')

    # Modify 'sensor_readings' structure
    with op.batch_alter_table('sensor_readings', schema=None) as batch_op:
        batch_op.add_column(sa.Column('component_id', sa.Integer(), nullable=False))
        batch_op.create_foreign_key(None, 'hardware_components', ['component_id'], ['component_id'])
        batch_op.drop_column('sensor_id')

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('sensor_readings', schema=None) as batch_op:
        batch_op.add_column(sa.Column('sensor_id', sa.INTEGER(), autoincrement=False, nullable=False))
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.create_foreign_key('sensor_readings_sensor_id_fkey', 'sensors', ['sensor_id'], ['sensor_id'])
        batch_op.drop_column('component_id')

    op.create_table('sensors',
    sa.Column('sensor_id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('greenhouse_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('type', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('unit', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('installed_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('last_calibrated', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.CheckConstraint("status::text = ANY (ARRAY['Active'::character varying, 'Inactive'::character varying]::text[])", name='valid_status'),
    sa.CheckConstraint("type::text = ANY (ARRAY['pH'::character varying, 'TDS'::character varying, 'Temperature'::character varying, 'Humidity'::character varying]::text[])", name='valid_type'),
    sa.ForeignKeyConstraint(['greenhouse_id'], ['greenhouses.greenhouse_id'], name='sensors_greenhouse_id_fkey'),
    sa.PrimaryKeyConstraint('sensor_id', name='sensors_pkey')
    )
    # ### end Alembic commands ###
